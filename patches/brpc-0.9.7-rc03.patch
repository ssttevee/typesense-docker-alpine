--- a/src/brpc/acceptor.cpp
+++ b/src/brpc/acceptor.cpp
@@ -240,9 +240,9 @@
 
 void Acceptor::OnNewConnectionsUntilEAGAIN(Socket* acception) {
     while (1) {
-        struct sockaddr in_addr;
+        butil::sockaddr_t in_addr;
         socklen_t in_len = sizeof(in_addr);
-        butil::fd_guard in_fd(accept(acception->fd(), &in_addr, &in_len));
+        butil::fd_guard in_fd(accept(acception->fd(), (struct sockaddr *) &in_addr, &in_len));
         if (in_fd < 0) {
             // no EINTR because listened fd is non-blocking.
             if (errno == EAGAIN) {
@@ -269,7 +269,7 @@
         SocketOptions options;
         options.keytable_pool = am->_keytable_pool;
         options.fd = in_fd;
-        options.remote_side = butil::EndPoint(*(sockaddr_in*)&in_addr);
+        options.remote_side = butil::EndPoint(in_addr);
         options.user = acception->user();
         options.on_edge_triggered_events = InputMessenger::OnNewMessages;
         options.initial_ssl_ctx = am->_ssl_ctx;
--- a/src/brpc/builtin/rpcz_service.cpp
+++ b/src/brpc/builtin/rpcz_service.cpp
@@ -447,7 +447,7 @@
             microseconds = 999999;
         }
     }
-    return timelocal(&timeinfo) * 1000000L + microseconds;
+    return mktime(&timeinfo) * 1000000L + microseconds;
 }
 
 static bool ParseUint64(const std::string* str, uint64_t* val) {
--- a/src/brpc/global.cpp
+++ b/src/brpc/global.cpp
@@ -84,9 +84,6 @@
 #include "brpc/server.h"
 #include "brpc/trackme.h"             // TrackMe
 #include "brpc/details/usercode_backup_pool.h"
-#if defined(OS_LINUX)
-#include <malloc.h>                   // malloc_trim
-#endif
 #include "butil/fd_guard.h"
 #include "butil/files/file_watcher.h"
 
@@ -271,11 +268,6 @@
             // it does work for heap profilers.
             if (MallocExtension_ReleaseFreeMemory != NULL) {
                 MallocExtension_ReleaseFreeMemory();
-            } else {
-#if defined(OS_LINUX)
-                // GNU specific.
-                malloc_trim(10 * 1024 * 1024/*leave 10M pad*/);
-#endif
             }
         }
     }
--- a/src/brpc/socket.cpp
+++ b/src/brpc/socket.cpp
@@ -1114,7 +1114,8 @@
     } else {
         _ssl_state = SSL_OFF;
     }
-    butil::fd_guard sockfd(socket(AF_INET, SOCK_STREAM, 0));
+    butil::ip_t ip = remote_side().ip;
+    butil::fd_guard sockfd(socket(ip.address_family(), SOCK_STREAM, 0));
     if (sockfd < 0) {
         PLOG(ERROR) << "Fail to create socket";
         return -1;
@@ -1122,14 +1123,10 @@
     CHECK_EQ(0, butil::make_close_on_exec(sockfd));
     // We need to do async connect (to manage the timeout by ourselves).
     CHECK_EQ(0, butil::make_non_blocking(sockfd));
-    
-    struct sockaddr_in serv_addr;
-    bzero((char*)&serv_addr, sizeof(serv_addr));
-    serv_addr.sin_family = AF_INET;
-    serv_addr.sin_addr = remote_side().ip;
-    serv_addr.sin_port = htons(remote_side().port);
+
+    butil::sockaddr_t serv_addr;
     const int rc = ::connect(
-        sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
+        sockfd, (struct sockaddr*) &serv_addr, ip.socket_addr(&serv_addr, remote_side().port));
     if (rc != 0 && errno != EINPROGRESS) {
         PLOG(WARNING) << "Fail to connect to " << remote_side();
         return -1;
--- a/src/bthread/mutex.cpp
+++ b/src/bthread/mutex.cpp
@@ -43,10 +43,6 @@
 #include "bthread/sys_futex.h"
 #include "bthread/log.h"
 
-extern "C" {
-extern void* _dl_sym(void* handle, const char* symbol, void* caller);
-}
-
 namespace bthread {
 // Warm up backtrace before main().
 void* dummy_buf[4];
@@ -405,16 +401,8 @@
 // Call _dl_sym which is a private function in glibc to workaround the malloc
 // causing deadlock temporarily. This fix is hardly portable.
 static void init_sys_mutex_lock() {
-#if defined(OS_LINUX)
-    // TODO: may need dlvsym when GLIBC has multiple versions of a same symbol.
-    // http://blog.fesnel.com/blog/2009/08/25/preloading-with-multiple-symbol-versions
-    sys_pthread_mutex_lock = (MutexOp)_dl_sym(RTLD_NEXT, "pthread_mutex_lock", (void*)init_sys_mutex_lock);
-    sys_pthread_mutex_unlock = (MutexOp)_dl_sym(RTLD_NEXT, "pthread_mutex_unlock", (void*)init_sys_mutex_lock);
-#elif defined(OS_MACOSX)
-    // TODO: look workaround for dlsym on mac
     sys_pthread_mutex_lock = (MutexOp)dlsym(RTLD_NEXT, "pthread_mutex_lock");
     sys_pthread_mutex_unlock = (MutexOp)dlsym(RTLD_NEXT, "pthread_mutex_unlock");
-#endif
 }
 
 // Make sure pthread functions are ready before main().
--- a/src/bthread/stack.cpp
+++ b/src/bthread/stack.cpp
@@ -54,10 +54,10 @@
     "bthread_stack_count", get_stack_count, NULL);
 
 int allocate_stack_storage(StackStorage* s, int stacksize_in, int guardsize_in) {
-    const static int PAGESIZE = getpagesize();
-    const int PAGESIZE_M1 = PAGESIZE - 1;
-    const int MIN_STACKSIZE = PAGESIZE * 2;
-    const int MIN_GUARDSIZE = PAGESIZE;
+    const static int _PAGESIZE = getpagesize();
+    const int PAGESIZE_M1 = _PAGESIZE - 1;
+    const int MIN_STACKSIZE = _PAGESIZE * 2;
+    const int MIN_GUARDSIZE = _PAGESIZE;
 
     // Align stacksize
     const int stacksize =
@@ -104,7 +104,7 @@
         void* aligned_mem = (void*)(((intptr_t)mem + PAGESIZE_M1) & ~PAGESIZE_M1);
         if (aligned_mem != mem) {
             LOG_ONCE(ERROR) << "addr=" << mem << " returned by mmap is not "
-                "aligned by pagesize=" << PAGESIZE;
+                "aligned by pagesize=" << _PAGESIZE;
         }
         const int offset = (char*)aligned_mem - (char*)mem;
         if (guardsize <= offset ||
--- a/src/butil/endpoint.cpp
+++ b/src/butil/endpoint.cpp
@@ -22,6 +22,7 @@
 #include <netdb.h>                             // gethostbyname_r
 #include <unistd.h>                            // gethostname
 #include <errno.h>                             // errno
+#include <ifaddrs.h>                           // getifaddrs, freeifaddrs
 #include <string.h>                            // strcpy
 #include <stdio.h>                             // snprintf
 #include <stdlib.h>                            // strtol
@@ -47,21 +48,74 @@
 
 namespace butil {
 
+static unsigned scope_for_ip(struct in6_addr addr) {
+    struct ifaddrs *addrs;
+    getifaddrs(&addrs);
+
+    unsigned scope = 0;
+    for (ifaddrs *ifa = addrs; ifa; ifa = ifa->ifa_next) {
+        if (ifa->ifa_addr && ifa->ifa_addr->sa_family == AF_INET6) {
+            // if the ip matches, convert the interface name to a scope index
+            auto sa = (struct sockaddr_in6 *) ifa->ifa_addr;
+            if (strncmp((char *) &addr, (char *) &sa->sin6_addr, sizeof(struct in6_addr)) == 0) {
+                scope = sa->sin6_scope_id;
+                break;
+            }
+        }
+    }
+
+    freeifaddrs(addrs);
+    return scope;
+}
+
+socklen_t ip_t::socket_addr(sockaddr_t* address, int port) const {
+    bzero((char*) address, sizeof(address));
+    if (is_ipv6) {
+        struct sockaddr_in6* serv_addr = (struct sockaddr_in6*) address;
+        serv_addr->sin6_family = AF_INET6;
+        serv_addr->sin6_addr = addr.v6;
+        serv_addr->sin6_port = htons(port);
+        serv_addr->sin6_scope_id = scope_for_ip(addr.v6);
+        return sizeof(struct sockaddr_in6);
+    }
+
+    struct sockaddr_in* serv_addr = (struct sockaddr_in*) address;
+    serv_addr->sin_family = AF_INET;
+    serv_addr->sin_addr = addr.v4;
+    serv_addr->sin_port = htons(port);
+    return sizeof(struct sockaddr_in);
+}
+
 int str2ip(const char* ip_str, ip_t* ip) {
     // ip_str can be NULL when called by EndPoint(0, ...)
     if (ip_str != NULL) {
         for (; isspace(*ip_str); ++ip_str);
-        int rc = inet_pton(AF_INET, ip_str, ip);
+        int rc = inet_pton(AF_INET, ip_str, &ip->addr.v4);
         if (rc > 0) {
+            ip->is_ipv6 = false;
             return 0;
         }
+
+        rc = inet_pton(AF_INET6, ip_str, &ip->addr.v6);
+        if (rc > 0) {
+            ip->is_ipv6 = true;
+            return 0;
+        }
     }
     return -1;
 }
 
+static const char* ip_t_ntop(const ip_t *ip, char* out) {
+    if (ip->is_ipv6) {
+        return inet_ntop(AF_INET6, &ip->addr.v6, out, INET6_ADDRSTRLEN);
+    }
+
+    return inet_ntop(AF_INET, &ip->addr.v4, out, INET_ADDRSTRLEN);
+}
+
 IPStr ip2str(ip_t ip) {
     IPStr str;
-    if (inet_ntop(AF_INET, &ip, str._buf, INET_ADDRSTRLEN) == NULL) {
+    if (ip_t_ntop(&ip, str._buf) == NULL) {
         return ip2str(IP_NONE);
     }
     return str;
@@ -72,12 +126,8 @@
         errno = EINVAL;
         return -1;
     }
-    sockaddr_in sa;
-    bzero((char*)&sa, sizeof(sa));
-    sa.sin_family = AF_INET;
-    sa.sin_port = 0;    // useless since we don't need server_name
-    sa.sin_addr = ip;
-    if (getnameinfo((const sockaddr*)&sa, sizeof(sa),
+    sockaddr_t sa;
+    if (getnameinfo((struct sockaddr*) &sa, ip.socket_addr(&sa, 0),
                     host, host_len, NULL, 0, NI_NAMEREQD) != 0) {
         return -1;
     }
@@ -100,10 +150,18 @@
 
 EndPointStr endpoint2str(const EndPoint& point) {
     EndPointStr str;
-    if (inet_ntop(AF_INET, &point.ip, str._buf, INET_ADDRSTRLEN) == NULL) {
+    char* buf = str._buf;
+    if (point.ip.is_ipv6) {
+        *buf++ = '[';
+    }
+
+    if (ip_t_ntop(&point.ip, buf) == NULL) {
         return endpoint2str(EndPoint(IP_NONE, 0));
     }
-    char* buf = str._buf + strlen(str._buf);
+    buf = buf + strlen(buf);
+    if (point.ip.is_ipv6) {
+        *buf++ = ']';
+    }
     *buf++ = ':';
     snprintf(buf, 16, "%d", point.port);
     return str;
@@ -140,7 +198,8 @@
     }
 #endif // defined(OS_MACOSX)
     // Only fetch the first address here
-    bcopy((char*)result->h_addr, (char*)ip, result->h_length);
+    ip->is_ipv6 = false;
+    bcopy((char*)result->h_addr, (char*) &ip->addr.v4, result->h_length);
     return 0;
 }
 
@@ -172,31 +231,31 @@
     return get_leaky_singleton<MyAddressInfo>()->my_hostname;
 }
 
+EndPoint::EndPoint(const sockaddr_t& in) {
+    if (in.family == AF_INET6) {
+        auto sa = (const struct sockaddr_in6 *) &in;
+        ip.is_ipv6 = true;
+        ip.addr.v6 = sa->sin6_addr;
+        port = ntohs(sa->sin6_port);
+    } else {
+        auto sa = (const struct sockaddr_in *) &in;
+        ip.is_ipv6 = false;
+        ip.addr.v4 = sa->sin_addr;
+        port = ntohs(sa->sin_port);
+    }
+}
+
 int str2endpoint(const char* str, EndPoint* point) {
     // Should be enough to hold ip address
     char buf[64];
-    size_t i = 0;
-    for (; i < sizeof(buf) && str[i] != '\0' && str[i] != ':'; ++i) {
-        buf[i] = str[i];
+    if (2 > sscanf(str, "%*[[]%63[^]]%*[]]%*[:]%d", buf, &point->port)) {
+        if (2 > sscanf(str, "%[^:]%*[:]%d", buf, &point->port)) {
+            return -1;
+        }
     }
-    if (i >= sizeof(buf) || str[i] != ':') {
-        return -1;
-    }
-    buf[i] = '\0';
     if (str2ip(buf, &point->ip) != 0) {
         return -1;
     }
-    ++i;
-    char* end = NULL;
-    point->port = strtol(str + i, &end, 10);
-    if (end == str + i) {
-        return -1;
-    } else if (*end) {
-        for (++end; isspace(*end); ++end);
-        if (*end) {
-            return -1;
-        }
-    }
     if (point->port < 0 || point->port > 65535) {
         return -1;
     }
@@ -280,21 +339,18 @@
 }
 
 int tcp_connect(EndPoint point, int* self_port) {
-    fd_guard sockfd(socket(AF_INET, SOCK_STREAM, 0));
+    fd_guard sockfd(socket(point.ip.address_family(), SOCK_STREAM, 0));
     if (sockfd < 0) {
         return -1;
     }
-    struct sockaddr_in serv_addr;
-    bzero((char*)&serv_addr, sizeof(serv_addr));
-    serv_addr.sin_family = AF_INET;
-    serv_addr.sin_addr = point.ip;
-    serv_addr.sin_port = htons(point.port);
+    sockaddr_t serv_addr;
     int rc = 0;
     if (bthread_connect != NULL) {
-        rc = bthread_connect(sockfd, (struct sockaddr*)&serv_addr,
-                             sizeof(serv_addr));
+        rc = bthread_connect(sockfd, (struct sockaddr*) &serv_addr,
+                             point.ip.socket_addr(&serv_addr, point.port));
     } else {
-        rc = ::connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
+        rc = ::connect(sockfd, (struct sockaddr*) &serv_addr,
+                       point.ip.socket_addr(&serv_addr, point.port));
     }
     if (rc < 0) {
         return -1;
@@ -311,7 +367,7 @@
 }
 
 int tcp_listen(EndPoint point) {
-    fd_guard sockfd(socket(AF_INET, SOCK_STREAM, 0));
+    fd_guard sockfd(socket(point.ip.address_family(), SOCK_STREAM, 0));
     if (sockfd < 0) {
         return -1;
     }
@@ -342,12 +398,9 @@
 #endif
     }
 
-    struct sockaddr_in serv_addr;
-    bzero((char*)&serv_addr, sizeof(serv_addr));
-    serv_addr.sin_family = AF_INET;
-    serv_addr.sin_addr = point.ip;
-    serv_addr.sin_port = htons(point.port);
-    if (bind(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) != 0) {
+    sockaddr_t serv_addr;
+    if (bind(sockfd, (struct sockaddr*) &serv_addr,
+             point.ip.socket_addr(&serv_addr, point.port)) != 0) {
         return -1;
     }
     if (listen(sockfd, 65535) != 0) {
@@ -358,29 +411,28 @@
     }
     return sockfd.release();
 }
-
 int get_local_side(int fd, EndPoint *out) {
-    struct sockaddr addr;
-    socklen_t socklen = sizeof(addr);
-    const int rc = getsockname(fd, &addr, &socklen);
+    butil::sockaddr_t addr;
+    socklen_t socklen = sizeof(in_addr);
+    const int rc = getsockname(fd, (struct sockaddr *) &addr, &socklen);
     if (rc != 0) {
         return rc;
     }
     if (out) {
-        *out = butil::EndPoint(*(sockaddr_in*)&addr);
+        *out = butil::EndPoint(addr);
     }
     return 0;
 }
 
 int get_remote_side(int fd, EndPoint *out) {
-    struct sockaddr addr;
-    socklen_t socklen = sizeof(addr);
-    const int rc = getpeername(fd, &addr, &socklen);
+    butil::sockaddr_t addr;
+    socklen_t socklen = sizeof(in_addr);
+    const int rc = getpeername(fd, (struct sockaddr *) &addr, &socklen);
     if (rc != 0) {
         return rc;
     }
     if (out) {
-        *out = butil::EndPoint(*(sockaddr_in*)&addr);
+        *out = butil::EndPoint(addr);
     }
     return 0;
 }
--- a/src/butil/endpoint.h
+++ b/src/butil/endpoint.h
@@ -28,18 +28,33 @@
 
 namespace butil {
 
+typedef struct {
+    sa_family_t family;
+    char addr_data[sizeof(struct sockaddr_in6) - sizeof(sa_family_t)]; // allocate enough space for ipv6 address
+} sockaddr_t;
+
 // Type of an IP address
-typedef struct in_addr ip_t;
+typedef struct {
+    inline int address_family() { return is_ipv6 ? AF_INET6 : AF_INET; }
+    socklen_t socket_addr(sockaddr_t* address, int port) const;
+    bool is_ipv6;
+    union {
+        struct in_addr  v4;
+        struct in6_addr v6;
+    } addr;
+} ip_t;
 
-static const ip_t IP_ANY = { INADDR_ANY };
-static const ip_t IP_NONE = { INADDR_NONE };
+static const ip_t IP_ANY = { false, INADDR_ANY };
+static const ip_t IP_NONE = { false, INADDR_NONE };
 
 // Convert |ip| to an integral
-inline in_addr_t ip2int(ip_t ip) { return ip.s_addr; }
+inline in_addr_t ip2int(ip_t ip) {
+    return ip.is_ipv6 ? 0 : ip.addr.v4.s_addr;
+}
 
 // Convert integral |ip_value| to an IP
 inline ip_t int2ip(in_addr_t ip_value) {
-    const ip_t ip = { ip_value };
+    const ip_t ip = { false, { .v4 = { ip_value } } };
     return ip;
 }
 
@@ -50,7 +65,7 @@
 
 struct IPStr {
     const char* c_str() const { return _buf; }
-    char _buf[INET_ADDRSTRLEN];
+    char _buf[INET6_ADDRSTRLEN];
 };
 
 // Convert IP to c-style string. Notice that you can serialize ip_t to
@@ -83,8 +98,11 @@
 struct EndPoint {
     EndPoint() : ip(IP_ANY), port(0) {}
     EndPoint(ip_t ip2, int port2) : ip(ip2), port(port2) {}
-    explicit EndPoint(const sockaddr_in& in)
-        : ip(in.sin_addr), port(ntohs(in.sin_port)) {}
+    explicit EndPoint(const sockaddr_t& in);
+    // explicit EndPoint(const sockaddr_in& in)
+    //     : ip({ false, { .v4 = in.sin_addr } }), port(ntohs(in.sin_port)) {}
+    // explicit EndPoint(const sockaddr_in6& in)
+    //     : ip({ true, { .v6 = in.sin6_addr } }), port(ntohs(in.sin6_port)) {}
     
     ip_t ip;
     int port;
@@ -92,7 +110,7 @@
 
 struct EndPointStr {
     const char* c_str() const { return _buf; }
-    char _buf[INET_ADDRSTRLEN + 16];
+    char _buf[INET6_ADDRSTRLEN + 2 + 16];
 };
 
 // Convert EndPoint to c-style string. Notice that you can serialize 
@@ -135,35 +153,61 @@
 
 }  // namespace butil
 
-// Since ip_t is defined from in_addr which is globally defined, due to ADL
-// we have to put overloaded operators globally as well.
-inline bool operator<(butil::ip_t lhs, butil::ip_t rhs) {
-    return butil::ip2int(lhs) < butil::ip2int(rhs);
+inline std::ostream& operator<<(std::ostream& os, const butil::IPStr& ip_str) {
+    return os << ip_str.c_str();
 }
-inline bool operator>(butil::ip_t lhs, butil::ip_t rhs) {
+inline std::ostream& operator<<(std::ostream& os, butil::ip_t ip) {
+    return os << butil::ip2str(ip);
+}
+
+namespace butil {
+inline bool operator<(ip_t lhs, ip_t rhs) {
+    if (!lhs.is_ipv6 && !rhs.is_ipv6) {
+        return lhs.addr.v4.s_addr < rhs.addr.v4.s_addr;
+    }
+
+    if (!lhs.is_ipv6 && rhs.is_ipv6) {
+        return true;
+    }
+
+    if (lhs.is_ipv6 && !rhs.is_ipv6) {
+        return false;
+    }
+
+    for (unsigned i = 0; i < sizeof(lhs.addr); i++) {
+        if (((char *) (void *) &lhs.addr)[i] < ((char *) (void *) &rhs.addr)[i]) {
+            return true;
+        }
+    }
+
+    return false;
+}
+inline bool operator>(ip_t lhs, ip_t rhs) {
     return rhs < lhs;
 }
-inline bool operator>=(butil::ip_t lhs, butil::ip_t rhs) {
+inline bool operator>=(ip_t lhs, ip_t rhs) {
     return !(lhs < rhs);
 }
-inline bool operator<=(butil::ip_t lhs, butil::ip_t rhs) {
+inline bool operator<=(ip_t lhs, ip_t rhs) {
     return !(rhs < lhs); 
 }
-inline bool operator==(butil::ip_t lhs, butil::ip_t rhs) {
-    return butil::ip2int(lhs) == butil::ip2int(rhs);
+inline bool operator==(ip_t lhs, ip_t rhs) {
+    if (lhs.is_ipv6 != rhs.is_ipv6) {
+        return false;
+    }
+
+    if (lhs.is_ipv6) {
+        return memcmp(&lhs.addr.v6, &rhs.addr.v6, sizeof(struct in6_addr)) == 0;
+    }
+
+    return lhs.addr.v4.s_addr == rhs.addr.v4.s_addr;
 }
-inline bool operator!=(butil::ip_t lhs, butil::ip_t rhs) {
+inline bool operator!=(ip_t lhs, ip_t rhs) {
     return !(lhs == rhs);
 }
-
-inline std::ostream& operator<<(std::ostream& os, const butil::IPStr& ip_str) {
-    return os << ip_str.c_str();
+inline std::ostream& operator<<(std::ostream& os, ip_t ip) {
+    return os << ip2str(ip).c_str();
 }
-inline std::ostream& operator<<(std::ostream& os, butil::ip_t ip) {
-    return os << butil::ip2str(ip);
-}
-
-namespace butil {
 // Overload operators for EndPoint in the same namespace due to ADL.
 inline bool operator<(EndPoint p1, EndPoint p2) {
     return (p1.ip != p2.ip) ? (p1.ip < p2.ip) : (p1.port < p2.port);
@@ -184,11 +228,11 @@
     return !(p1 == p2);
 }
 
-inline std::ostream& operator<<(std::ostream& os, const EndPoint& ep) {
-    return os << ep.ip << ':' << ep.port;
-}
 inline std::ostream& operator<<(std::ostream& os, const EndPointStr& ep_str) {
     return os << ep_str.c_str();
+}
+inline std::ostream& operator<<(std::ostream& os, const EndPoint& ep) {
+    return os << endpoint2str(ep);
 }
 
 }  // namespace butil--- a/src/butil/errno.cpp
+++ b/src/butil/errno.cpp
@@ -52,16 +52,11 @@
             return -1;
         }
     } else {
-#if defined(OS_MACOSX)
         const int rc = strerror_r(error_code, tls_error_buf, ERROR_BUFSIZE);
-        if (rc != EINVAL)
-#else
-        desc = strerror_r(error_code, tls_error_buf, ERROR_BUFSIZE);
-        if (desc && strncmp(desc, "Unknown error", 13) != 0)
-#endif
+        if (strcmp(tls_error_buf, "No error information") != 0)
         {
             fprintf(stderr, "Fail to define %s(%d) which is already defined as `%s', abort.",
-                    error_name, error_code, desc);
+                    error_name, error_code, tls_error_buf);
             _exit(1);
         }
     }
@@ -80,17 +75,10 @@
         if (s) {
             return s;
         }
-#if defined(OS_MACOSX)
         const int rc = strerror_r(error_code, butil::tls_error_buf, butil::ERROR_BUFSIZE);
         if (rc == 0 || rc == ERANGE/*bufsize is not long enough*/) {
             return butil::tls_error_buf;
         }
-#else
-        s = strerror_r(error_code, butil::tls_error_buf, butil::ERROR_BUFSIZE);
-        if (s) {
-            return s;
-        }
-#endif
     }
     snprintf(butil::tls_error_buf, butil::ERROR_BUFSIZE,
              "Unknown error %d", error_code);
